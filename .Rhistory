)
dim.by.question <- apply(X = dim.by.question, MARGIN = c(1,2) , FUN = as.numeric)
#dim.by.question <- na.omit(dim.by.question)
dim.by.question2 = unname(cbind(
list.of.traj.points,
set.traj$points.rotated[,2]
))
dim.by.question2 <- apply(X = dim.by.question2, MARGIN = c(1,2) , FUN = as.numeric)
dim.by.question2 <- na.omit(dim.by.question2)
### plot x dim as time and y dim as mean rotated dim
ena.plot(set.traj) %>%
ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
ena.plot.trajectory(
points = dim.by.question [ units.and.meta$HighLow == 1 , ],
names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
)
#ena.plot.network (network = colMeans( set.traj$line.weights [ dim.by.question[,1] == 6759 & dim.by.question[,4] == "Lesson 4 Competition Between Populations", ]), colors = "blue"
#)
ena.plot(set.traj) %>%
#ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
#ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
ena.plot.trajectory(
points = dim.by.question [ units.and.meta$HighLow == 1 , ],
names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
)
#ena.plot.network (network = colMeans( set.traj$line.weights [ dim.by.question[,1] == 6759 & dim.by.question[,4] == "Lesson 4 Competition Between Populations", ]), colors = "blue"
#)
ena.plot(set.traj) %>%
#ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
#ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
# ena.plot.trajectory(
#   points = dim.by.question [ units.and.meta$HighLow == 1 , ],
#   names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
#   by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
# )
ena.plot.network (network = colMeans( set.traj$line.weights [ dim.by.question[,1] == 6779 & dim.by.question[,1] == "Lesson 1 Introduction to Ecosystems and Models", ]), colors = "red"
)
dim.by.question = unname(
cbind(
as.character(units.and.meta$Participant),
list.of.traj.points,
set.traj$points.rotated[,1],
units.and.meta$Curriculum,  # *.8/14-.4  #scale down to dimension 1
units.and.meta$`Question No.`
)
)
dim.by.question <- apply(X = dim.by.question, MARGIN = c(1,2) , FUN = as.numeric)
#dim.by.question <- na.omit(dim.by.question)
dim.by.question2 = unname(cbind(
list.of.traj.points,
set.traj$points.rotated[,2]
))
dim.by.question2 <- apply(X = dim.by.question2, MARGIN = c(1,2) , FUN = as.numeric)
dim.by.question2 <- na.omit(dim.by.question2)
### plot x dim as time and y dim as mean rotated dim
ena.plot(set.traj) %>%
#ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
#ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
# ena.plot.trajectory(
#   points = dim.by.question [ units.and.meta$HighLow == 1 , ],
#   names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
#   by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
# )
ena.plot.network (network = colMeans( set.traj$line.weights [ dim.by.question[,1] == 6779 & dim.by.question[,1] == "Lesson 1 Introduction to Ecosystems and Models", ]), colors = "red"
)
dim.by.question = unname(
cbind(
as.character(units.and.meta$Participant),
list.of.traj.points,
set.traj$points.rotated[,1],
units.and.meta$Curriculum,  # *.8/14-.4  #scale down to dimension 1
units.and.meta$`Question No.`
)
)
dim.by.question <- apply(X = dim.by.question, MARGIN = c(1,2) , FUN = as.numeric)
#dim.by.question <- na.omit(dim.by.question)
dim.by.question2 = unname(cbind(
list.of.traj.points,
set.traj$points.rotated[,2]
))
dim.by.question2 <- apply(X = dim.by.question2, MARGIN = c(1,2) , FUN = as.numeric)
dim.by.question2 <- na.omit(dim.by.question2)
### plot x dim as time and y dim as mean rotated dim
ena.plot(set.traj) %>%
#ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
#ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
# ena.plot.trajectory(
#   points = dim.by.question [ units.and.meta$HighLow == 1 , ],
#   names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
#   by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
# )
ena.plot.network (network = colMeans( set.traj$line.weights [ dim.by.question[,3] == 6779 & dim.by.question[,3] == "Lesson 1 Introduction to Ecosystems and Models", ]), colors = "red"
)
accum.traj = ena.accumulate.data(
units = data.frame("Participant" = alldata.sa[, c("Participant")]),
#alldata.sa$Participant [ alldata.sa$`Participant Category` == "Student" ] ,
conversation = alldata.sa[, conversation],
metadata = alldata.sa[, meta],
codes = alldata.sa[, codeNames],
model = "AccumulatedTrajectory",
window.size.back = 1
);
units.and.meta = accum.traj$units[accum.traj$metadata, on=.(Participant)]
set.traj = ena.make.set(
enadata = accum.traj,
rotation.by = rENA:::ena.rotate.by.mean,
rotation.params = list(units.and.meta$HighLow==1&!is.na(units.and.meta$HighLow), units.and.meta$HighLow==0&!is.na(units.and.meta$HighLow))
);
### Find rows that are High, along with points, weights, & mean
rows.high = units.and.meta$HighLow == 1 & !is.na(units.and.meta$HighLow)
points.high = set.traj$points.rotated[rows.high,]
weights.high = set.traj$line.weights[rows.high,]
mean.high = colMeans(weights.high)
### Find rows that are Low, along with points, weights, & mean
rows.low = units.and.meta$HighLow == 0 & !is.na(units.and.meta$HighLow)
points.low = set.traj$points.rotated[rows.low,]
weights.low = set.traj$line.weights[rows.low,]
mean.low = colMeans(weights.low)
list.of.traj.points <- paste(units.and.meta$Curriculum, units.and.meta$`Step No.`, units.and.meta$`Question No.`)
list.of.traj.points <- gsub(pattern = "Introduction to Ecosystems and Models|Lesson|Competition Between Populations|Competition Between Individuals|Population Dynamics| " , replacement = "" , x = list.of.traj.points)
dim.by.question = unname(
cbind(
as.character(units.and.meta$Participant),
list.of.traj.points,
set.traj$points.rotated[,1],
units.and.meta$Curriculum,  # *.8/14-.4  #scale down to dimension 1
units.and.meta$`Question No.`
)
)
dim.by.question <- apply(X = dim.by.question, MARGIN = c(1,2) , FUN = as.numeric)
#dim.by.question <- na.omit(dim.by.question)
dim.by.question2 = unname(cbind(
list.of.traj.points,
set.traj$points.rotated[,2]
))
dim.by.question2 <- apply(X = dim.by.question2, MARGIN = c(1,2) , FUN = as.numeric)
dim.by.question2 <- na.omit(dim.by.question2)
### plot x dim as time and y dim as mean rotated dim
ena.plot(set.traj) %>%
#ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
#ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
# ena.plot.trajectory(
#   points = dim.by.question [ units.and.meta$HighLow == 1 , ],
#   names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
#   by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
# )
ena.plot.network (network = colMeans( set.traj$line.weights [ dim.by.question[,3] == 6779 & dim.by.question[,3] == "Lesson 1 Introduction to Ecosystems and Models", ]), colors = "red"
)
ena.plot(set.traj) %>%
#ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
#ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
# ena.plot.trajectory(
#   points = dim.by.question [ units.and.meta$HighLow == 1 , ],
#   names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
#   by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
# )
ena.plot.network (network = colMeans( set.traj$line.weights [ dim.by.question[,3] == 6779 & dim.by.question[,3] == "Lesson 1 Introduction to Ecosystems and Models", ]), colors = "blue")
###
dim.by.question[,3] == 6779
dim.by.question = unname(
cbind(
as.character(units.and.meta$Participant),
list.of.traj.points,
set.traj$points.rotated[,1],
units.and.meta$Curriculum,  # *.8/14-.4  #scale down to dimension 1
units.and.meta$`Question No.`
)
)
#dim.by.question <- apply(X = dim.by.question, MARGIN = c(1,2) , FUN = as.numeric)
#dim.by.question <- na.omit(dim.by.question)
dim.by.question2 = unname(cbind(
list.of.traj.points,
set.traj$points.rotated[,2]
))
dim.by.question2 <- apply(X = dim.by.question2, MARGIN = c(1,2) , FUN = as.numeric)
dim.by.question2 <- na.omit(dim.by.question2)
### plot x dim as time and y dim as mean rotated dim
ena.plot(set.traj) %>%
#ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
#ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
# ena.plot.trajectory(
#   points = dim.by.question [ units.and.meta$HighLow == 1 , ],
#   names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
#   by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
# )
ena.plot.network (network = colMeans( set.traj$line.weights [ dim.by.question[,3] == 6779 & dim.by.question[,3] == "Lesson 1 Introduction to Ecosystems and Models", ]), colors = "blue")
### plot x as
set.traj$line.weights [ dim.by.question[,3] == 6779 & dim.by.question[,3] == "Lesson 1 Introduction to Ecosystems and Models", ]
set.traj$line.weights
set.traj$line.weights [ dim.by.question[,3] == 6779 & dim.by.question[,3] == "Lesson 1 Introduction to Ecosystems and Models", ]
ena.plot(set.traj) %>%
#ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
#ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
# ena.plot.trajectory(
#   points = dim.by.question [ units.and.meta$HighLow == 1 , ],
#   names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
#   by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
# )
ena.plot.network (network = colMeans( set.traj$line.weights [ dim.by.question[,1] == 6779 & dim.by.question[,3] == "Lesson 1 Introduction to Ecosystems and Models", ]), colors = "blue")
ena.plot(set.traj) %>%
#ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
#ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
# ena.plot.trajectory(
#   points = dim.by.question [ units.and.meta$HighLow == 1 , ],
#   names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
#   by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
# )
ena.plot.network (network = colMeans( set.traj$line.weights [ dim.by.question[,1] == 6779 & dim.by.question[,4] == "Lesson 1 Introduction to Ecosystems and Models", ]), colors = "blue")
ena.plot(set.traj) %>%
#ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
#ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
# ena.plot.trajectory(
#   points = dim.by.question [ units.and.meta$HighLow == 1 , ],
#   names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
#   by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
# )
ena.plot.network (network = colMeans( set.traj$line.weights [ dim.by.question[,1] == 6779 & dim.by.question[,4] == "Lesson 2 Population Dynamics", ]), colors = "blue")
dim.by.question = unname(
cbind(
#as.character(units.and.meta$Participant),
list.of.traj.points,
set.traj$points.rotated[,1]
# units.and.meta$Curriculum,  # *.8/14-.4  #scale down to dimension 1
# units.and.meta$`Question No.`
)
)
dim.by.question = unname(
cbind(
#as.character(units.and.meta$Participant),
list.of.traj.points,
set.traj$points.rotated[,1]
# units.and.meta$Curriculum,  # *.8/14-.4  #scale down to dimension 1
# units.and.meta$`Question No.`
)
)
ena.plot(set.traj) %>%
#ena.plot.group(points.high, labels = "High", colors = "blue", confidence.interval = "box") %>%
#ena.plot.group(points.low,  labels = "Low",  colors = "red",  confidence.interval = "box") %>%
ena.plot.trajectory(
points = dim.by.question [ units.and.meta$HighLow == 1 , ],
names = unique(units.and.meta$Participant[ units.and.meta$HighLow == 1 ] ),
by = units.and.meta$Participant[ units.and.meta$HighLow == 1 ]
)
data <- data.frame("2005" = c(2,5), "2006" = c(3,14), "2007" = c(4,19), "2008" = c(1,12), "2009" = c(4,19), row.names = c("Number of films Nicolas Cage appeared in", "Female Editors on Harvard Law Review"))
data
colnames(data) <- gsub("^X", "", colnames(data))
data
data <- data.frame("Year" = c("2005", "2006", "2007", "2008", "2009"), "Number" = c(2,3,4,1,4,5,14,19,12,19), "Group" = c(rep("Number of films Nicolas Cage appeared in", 5), rep("Female Editors on Harvard Law Review", 5)))
data
ggplot(data, aes(x = Year, y = Number, group = Group)) + geom_line()
require(tidyverse)
data <- data.frame("Year" = c("2005", "2006", "2007", "2008", "2009"), "Number" = c(2,3,4,1,4,5,14,19,12,19), "Group" = c(rep("Number of films Nicolas Cage appeared in", 5), rep("Female Editors on Harvard Law Review", 5)))
ggplot(data, aes(x = Year, y = Number, group = Group)) + geom_line()
ggplot(data, aes(x = Year, y = Number, fill = Group)) + geom_line()
ggplot(data, aes(x = Year, y = Number, group = Group, fill = Group)) + geom_line()
ggplot(data, aes(x = Year, y = Number, group = Group, fill = Group)) + geom_line()
ggplot(data, aes(x = Year, y = Number, group = Group, fill = Group)) + geom_line()
data <- data.frame("Year" = c("2005", "2006", "2007", "2008", "2009"), "Number" = c(2,3,4,1,4,9,14,19,12,19), "Group" = c(rep("Number of films Nicolas Cage appeared in", 5), rep("Female Editors on Harvard Law Review", 5)))
ggplot(data, aes(x = Year, y = Number, group = Group, fill = Group)) + geom_line()
shiny::runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
faithful
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
rnorm(100, 10, 2)
plot(rnorm(100, 10, 2))
hist(rnorm(100, 10, 2))
hist(rnorm(1, 10, 2))
hist(rnorm(10, 10, 2))
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
sim.es <- function() {
d1 <- rnorm(input$sizeA, input$meanA, input$varA)
d2 <- rnorm(input$sizeB, input$meanB, input$varB)
dist.data <- rbind(d1,d2)
dist.data$dataset <- c(rep("A", length(d1)), rep("B", length(d2)))
es <- cohen.d(d1, d2, paired = FALSE)$estimate
}
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
shiny::runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
data.dist
d1 <- rnorm(input$sizeA, input$meanA, input$varA)
d2 <- rnorm(input$sizeB, input$meanB, input$varB)
dist.data <- rbind(d1,d2)
dist.data$dataset <- c(rep("A", length(d1)), rep("B", length(d2)))
data_frame(data.dist)
d1 <- rnorm(100,10,2)
d2 <- rnorm(100,50,3)
dist.data <- rbind(d1,d2)
dist.data$dataset <- c(rep("A", length(d1)), rep("B", length(d2)))
data_frame(data.dist)
dist.data
d1 <- rnorm(100,10,2)
d2 <- rnorm(100,50,3)
dist.data <- rbind(d1,d2)
dist.data$dataset <- c(rep("A", length(d1)), rep("B", length(d2)))
data_frame(data.dist)
d1 <- rnorm(100,10,2)
d2 <- rnorm(100,50,3)
dist.data <- rbind(d1,d2)
dist.data
View(dist.data)
d1 <- rnorm(100,10,2)
d2 <- rnorm(100,50,3)
dist.data <- unite(d1,d2)
d1 <- rnorm(100,10,2)
d2 <- rnorm(100,50,3)
dist.data <- melt(d1,d2)
d1 <- rnorm(100,10,2)
d2 <- rnorm(100,50,3)
dist.data <- unite(cbind(d1,d2),dist)
bind_cols(d1,d2)
d1
d2
bind_cols(d1,d2)
class(d1)
class(d2)
sts(d1)
srs(d1)
summary(d1)
bind_cols(data.frame(d1),data.frame(d2))
dA <- rnorm(100,10,2)
dB <- rnorm(100,50,3)
dist.data <- bind_cols(data.frame(dA),data.frame(dB))
%>% gather(dataset, dist)
dA <- rnorm(100,10,2)
dB <- rnorm(100,50,3)
dist.data <- bind_cols(data.frame(dA),data.frame(dB)) %>%
gather(dataset, dist)
dist.data
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
dA <- rnorm(input$sizeA, input$meanA, input$varA)
dB <- rnorm(input$sizeB, input$meanB, input$varB)
dist.data <- bind_cols(data.frame(dA),data.frame(dB)) %>%
gather(dataset, dist)
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
dA <- rnorm(input$sizeA, input$meanA, input$varA)
dB <- rnorm(input$sizeB, input$meanB, input$varB)
dist.data <- bind_cols(data.frame(dA),data.frame(dB)) %>%
gather(dataset, dist)
dist.data
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
dA <- rnorm(input$sizeA, input$meanA, input$varA)
dB <- rnorm(input$sizeB, input$meanB, input$varB)
dist.data <- bind_cols(data.frame(dA),data.frame(dB)) %>%
gather(dataset, dist)
dist.data
dA <- rnorm(input$sizeA, input$meanA, input$varA)
dB <- rnorm(input$sizeB, input$meanB, input$varB)
dist.data <- bind_cols(data.frame(dA),data.frame(dB)) %>%
gather(dataset, dist)
dist.data
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
dA <- rnorm(input$sizeA, input$meanA, input$varA)
dB <- rnorm(input$sizeB, input$meanB, input$varB)
dist.data <- bind_cols(data.frame(dA),data.frame(dB)) %>%
gather(dataset, dist) %>%
as.data.frame()
dist.data
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
dist.data
class(dist.data)
dA <- rnorm(input$sizeA, input$meanA, input$varA)
dB <- rnorm(input$sizeB, input$meanB, input$varB)
dist.data <- bind_cols(data.frame(dA),data.frame(dB)) %>%
gather(dataset, dist) %>%
as.data.frame()
dist.data
dA <- rnorm(input$sizeA, input$meanA, input$varA)
dB <- rnorm(input$sizeB, input$meanB, input$varB)
dist.data <- bind_cols(data.frame(dA),data.frame(dB)) %>%
gather(dataset, dist) %>%
as.data.frame()
dist.data
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
A <- rnorm(input$size, input$meanA, input$varA)
B <- rnorm(input$size, input$meanB, input$varB)
es <- cohen.d(A, B, paired = FALSE)$estimate
dist.data <- bind_cols(data.frame(A),data.frame(B)) %>%
gather(dataset, dist) %>%
as.data.frame()
list(dist.data, es)
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
A <- rnorm(input$size, input$meanA, input$varA)
B <- rnorm(input$size, input$meanB, input$varB)
effect <- cohen.d(A, B, paired = FALSE)$estimate
dist.data <- bind_cols(data.frame(A),data.frame(B)) %>%
gather(dataset, dist) %>%
as.data.frame()
list(dist.data, effect)
A <- rnorm(100,10,2)
B <- rnorm(100,20,3)
effect <- cohen.d(A, B, paired = FALSE)$estimate
dist.data <- bind_cols(data.frame(A),data.frame(B)) %>%
gather(dataset, dist) %>%
as.data.frame()
list(dist.data, effect)
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
A <- rnorm(100,10,2)
B <- rnorm(100,20,3)
effect <- cohen.d(A, B, paired = FALSE)$estimate
dist.data <- bind_cols(data.frame(A),data.frame(B)) %>%
gather(dataset, dist) %>%
as.data.frame()
list(dist.data == dist.data, effect == effect)
A <- rnorm(100,10,2)
B <- rnorm(100,20,3)
effect <- cohen.d(A, B, paired = FALSE)$estimate
dist.data <- bind_cols(data.frame(A),data.frame(B)) %>%
gather(dataset, dist) %>%
as.data.frame()
list(dist.data = dist.data, effect = effect)
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
traceback()
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
install.packages('rsconnect')
#install.packages('rsconnect')
rsconnect::setAccountInfo(name='golnaz',
token='2F6EA2EAC8C582FE95B424CA5B87F0D8',
secret='<SECRET>')
#install.packages('rsconnect')
rsconnect::setAccountInfo(name='golnaz',
token='2F6EA2EAC8C582FE95B424CA5B87F0D8',
secret='kQFuvTAoRolLxezY3SiXh3YRHvaiurnkn/K0VoWq')
#install.packages('rsconnect')
#rsconnect::setAccountInfo(name='golnaz',
#token='2F6EA2EAC8C582FE95B424CA5B87F0D8',
# secret='kQFuvTAoRolLxezY3SiXh3YRHvaiurnkn/K0VoWq')
library(rsconnect)
rsconnect::deployApp('/Users/gai7612/OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
shiny::runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
runApp('OneDrive/Documents/Data_Science_Project/effect size/EffectSize')
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/gai7612/Documents/GitHub/gol-like-soccer-goal.github.io")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
get_sentiments("bing")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
